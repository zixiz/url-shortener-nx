services:
  # --- REVERSE PROXY & SSL HANDLER ---
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
    networks:
      - app_network
    restart: unless-stopped

  # --- YOUR APPLICATION SERVICES ---
  client-app: 
    build:
      context: .
      dockerfile: ./apps/client-app/Dockerfile
      args:
        VITE_MANAGEMENT_API_URL_ARG: ${VITE_MANAGEMENT_API_URL_BUILD_ARG}
        VITE_APP_BASE_URL_ARG: ${VITE_APP_BASE_URL_BUILD_ARG}
    container_name: client_app_app
    depends_on:
      - management-service
    networks:
      - app_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client-app.rule=Host(`${DOMAIN_NAME}`,`${WWW_DOMAIN_NAME}`)"
      - "traefik.http.routers.client-app.priority=1"
      - "traefik.http.routers.client-app.entrypoints=websecure"
      - "traefik.http.routers.client-app.tls.certresolver=letsencrypt"
      - "traefik.http.services.client-app.loadbalancer.server.port=80"

  management-service:
    build:
      context: . 
      dockerfile: ./apps/management-service/Dockerfile 
    container_name: management_service_app
    env_file:
      - ./.env
      - ./apps/management-service/.env
    environment:
      NODE_ENV: production
      DB_SYNCHRONIZE: false
      PORT: ${MANAGEMENT_SERVICE_INTERNAL_PORT}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres_main_app:${DB_PORT_INTERNAL}/${DB_NAME}
      REDIS_URL: redis://${REDIS_HOST_DOCKER}:${REDIS_INTERNAL_PORT} 
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST_DOCKER}:${RABBITMQ_NODE_INTERNAL_PORT}
      JWT_SECRET: ${JWT_SECRET_GLOBAL}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN_GLOBAL}
      APP_BASE_URL: ${APP_BASE_URL_HOST_ACCESSIBLE}
      FRONTEND_URL: ${FRONTEND_URL_DOCKER_ACCESSIBLE}
    depends_on:
      postgres_main: { condition: service_healthy }
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    networks:
      - app_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.management-api.rule=Host(`${DOMAIN_NAME}`,`${WWW_DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.management-api.priority=10"
      - "traefik.http.routers.management-api.entrypoints=websecure"
      - "traefik.http.routers.management-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.management-api.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.management-api.middlewares=strip-api-prefix"

  redirect-service:
    build:
      context: .
      dockerfile: ./apps/redirect-service/Dockerfile
    container_name: redirect_service_app
    env_file:
      - ./.env
      - ./apps/redirect-service/.env
    environment:
      NODE_ENV: production
      PORT: ${REDIRECT_SERVICE_INTERNAL_PORT}
      REDIS_URL: redis://${REDIS_HOST_DOCKER}:${REDIS_INTERNAL_PORT}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST_DOCKER}:${RABBITMQ_NODE_INTERNAL_PORT}
      RABBITMQ_QUEUE_NAME: "new_url_queue"
      RABBITMQ_CLICK_EVENTS_QUEUE: "url_clicked_events_queue"
      WEB_APP_NOT_FOUND_URL: ${FRONTEND_URL_DOCKER_ACCESSIBLE}/404
    depends_on:
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    networks:
      - app_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redirect-service.rule=Host(`${DOMAIN_NAME}`,`${WWW_DOMAIN_NAME}`) && PathPrefix(`/s`)"
      - "traefik.http.routers.redirect-service.priority=10"
      - "traefik.http.routers.redirect-service.entrypoints=websecure"
      - "traefik.http.routers.redirect-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.redirect-service.loadbalancer.server.port=3003"
      - "traefik.http.middlewares.strip-s-prefix.stripprefix.prefixes=/s"
      - "traefik.http.routers.redirect-service.middlewares=strip-s-prefix"

  # --- EXTERNAL DEPENDENCIES ---
  postgres_main:
    image: postgres:15-alpine
    container_name: postgres_main_app
    env_file: ./.env
    volumes:
      - postgres_main_data_vol:/var/lib/postgresql/data
    networks: 
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-urlshorteneruser} -d ${DB_NAME:-url_shortener_db} -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis_app
    volumes:
      - redis_data_vol:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq_app
    env_file: ./.env
    volumes:
      - rabbitmq_data_vol:/var/lib/rabbitmq/
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

volumes:
  postgres_main_data_vol:
  redis_data_vol:
  rabbitmq_data_vol:

networks:
  app_network:
    driver: bridge

    